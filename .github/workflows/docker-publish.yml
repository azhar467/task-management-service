name: Build, Sonar Analysis with Coverage, and Push Docker Image to ECR

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - uses: actions/checkout@v3

      # Step 2: Set up JDK 17 for Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Build with Maven and run tests with coverage
      - name: Build with Maven and Run Tests
        run: |
          mvn clean verify \
          -Pcoverage

      # Step 4: Verify the JAR exists
      - name: Verify JAR exists
        run: ls target/

      # Step 5: Upload the JAR as an artifact to be used in the Sonar job
      - name: Upload JAR as artifact
        uses: actions/upload-artifact@v3
        with:
          name: task-management-service-jar
          path: target/task-management-service-0.0.1-SNAPSHOT.jar

  sonar_analysis:
    runs-on: ubuntu-latest
    needs: build  # This job depends on the 'build' job

    steps:
      # Step 1: Checkout code (for SonarQube configuration)
      - uses: actions/checkout@v3

      # Step 2: Install SonarQube Scanner
      - name: Install SonarQube Scanner
        run: |
          # Download and install SonarQube Scanner
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip sonar-scanner-cli-4.8.0.2856-linux.zip
          sudo mv sonar-scanner-4.8.0.2856-linux /opt/sonar-scanner
          echo 'export PATH=$PATH:/opt/sonar-scanner/bin' >> $GITHUB_ENV

      # Step 3: Run SonarQube Analysis with Coverage
      - name: Run SonarQube analysis
        run: |
          sonar-scanner \
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.java.binaries=target \
          -Dsonar.junit.reportPaths=target/surefire-reports \
          -Dsonar.jacoco.reportPaths=target/jacoco.exec

  push_to_ecr:
    runs-on: ubuntu-latest
    needs: build  # This job depends on the 'build' job

    steps:
      # Step 1: Checkout code (for Dockerfile and other files)
      - uses: actions/checkout@v3

      # Step 2: Download the built JAR artifact from the previous job
      - name: Download JAR artifact
        uses: actions/download-artifact@v3
        with:
          name: task-management-service-jar

      # Step 3: Verify the JAR is downloaded
      - name: Verify JAR downloaded
        run: ls .

      # Step 4: Configure AWS Credentials for ECR
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 5: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t azhar467/task-management-service:latest .

      # Step 6: Login to ECR
      - name: Login to ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin 789761962952.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # Step 7: Tag and Push Docker Image to ECR
      - name: Push Docker Image to ECR
        run: |
          docker tag azhar467/task-management-service:latest 789761962952.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/azhar467/task-management-service:latest
          docker push 789761962952.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/azhar467/task-management-service:latest
