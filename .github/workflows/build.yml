name: Build, Test, and Analyze

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    if: github.actor != 'local-profile'  # Exclude local profile
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for full SonarQube analysis

      # Step 2: Set up JDK 17 for Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Cache SonarQube
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Step 4: Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Step 5: Build with Maven (with coverage profile)
      - name: Build with Maven
        run: mvn clean install -Pcoverage

      # Step 6: SonarQube analysis
      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=azhar467_task-management-service \
            -Dsonar.organization=azhar467 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # Step 7: Verify the JAR exists
      - name: Verify JAR exists
        run: ls target/

      # Step 8: Upload the JAR as an artifact
      - name: Upload JAR as artifact
        uses: actions/upload-artifact@v4
        with:
          name: task-management-service-jar
          path: target/task-management-service-0.0.1-SNAPSHOT.jar
